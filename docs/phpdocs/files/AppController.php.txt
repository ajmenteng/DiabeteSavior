<?php
/**
 * Application level Controller
 *
 * This file is application-wide controller file. You can put all
 * application-wide controller-related methods here.
 *
 * PHP 5
 *
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @package       app.Controller
 * @since         CakePHP(tm) v 0.2.9
 * @license       http://www.opensource.org/licenses/mit-license.php MIT License
 */
App::uses('Controller', 'Controller');

/**
 * Application Controller
 *
 * Add your application-wide methods in the class below, your controllers
 * will inherit them.
 *
 * @package		app.Controller
 * @link		http://book.cakephp.org/2.0/en/controllers.html#the-app-controller
 */
class AppController extends Controller {
  //public $components = array('DebugKit.Toolbar', 'Session');
  public $components = array('Session', 'Cookie');
  public $current_user = array();
  public $helpers = array('Form' => array('className' => 'BootstrapForm'));
  

  
  public function beforeFilter() {
    parent::beforeFilter();
    $this->set('current_user', $this->Session->read('user'));
    $this->current_user = $this->Session->read('user');
    //$unitType = $this->Cookie->read('unitType');
    $unitType = $_COOKIE['unitType'];
    if(empty($unitType)) {
      setcookie("unitType", 'imperial', time() + 86400 * 90);  /* expire in 30 days */

      //$this->Cookie->write('unitType', 'imperial', false, '3 months');
    }
    $this->set('unitType', $unitType);
  }

  public function authenticate_user() {
    if($this->Session->read('user')) {
      return true;
    } else {
      throw new ForbiddenException();
      return false;
    }
  }

  public function user_session() {
    $user = $this->Session->read('user');
    if(!empty($user)) {
      return $user;
    } else {
      return false;
    }
  }

  public function authenticate_admin() {

    $user = $this->Session->read('user');
    //var_dump($user);
    if($user['role'] > 0) {
      return true;
    } else {
      throw new ForbiddenException();
      return false;
    }
  }


  public function can($action, $modelName) {
    //$controller = $params['controller'];
    //$action = $params['action'];
    return true;
  }
}

